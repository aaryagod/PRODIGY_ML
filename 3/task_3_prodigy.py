# -*- coding: utf-8 -*-
"""Task 3 Prodigy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wDqWK9etVAcdRN90UNBhz5qGk1AJnMzT

Task 3 Prodigy

By Aarya Godbole

ML Track
"""

# Upload train.zip
from google.colab import files
uploaded = files.upload()  # Upload your train.zip here

# Extract the zip
import zipfile, os, cv2
import numpy as np
from tqdm import tqdm
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score
import matplotlib.pyplot as plt

with zipfile.ZipFile("train.zip", 'r') as zip_ref:
    zip_ref.extractall("data")

# Load and preprocess images
X, y = [], []
IMG_SIZE = 64
MAX_IMAGES = 2000
DATA_DIR = "data/train"

for file in tqdm(os.listdir(DATA_DIR)):
    label = 0 if file.startswith("cat") else 1
    img_path = os.path.join(DATA_DIR, file)
    try:
        img = cv2.imread(img_path)
        img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        X.append(img.flatten())
        y.append(label)
    except:
        continue
    if len(X) >= MAX_IMAGES:
        break

X = np.array(X)
y = np.array(y)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train SVM
clf = SVC(kernel='linear')
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

# Results
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=["Cat", "Dog"]))

# Show predictions
plt.figure(figsize=(10, 4))
for i in range(10):
    img = X_test[i].reshape(IMG_SIZE, IMG_SIZE)
    plt.subplot(2, 5, i+1)
    plt.imshow(img, cmap='gray')
    plt.title(f"Pred: {'Dog' if y_pred[i] else 'Cat'}")
    plt.axis('off')
plt.tight_layout()
plt.show()