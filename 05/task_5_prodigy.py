# -*- coding: utf-8 -*-
"""Task 5 Prodigy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ID3-6KxWNY25rpjDRPdla4GoE28ijKv_

Task 5 Prodigy

By Aarya Godbole

ML Track
"""

# STEP 1: Install Required Libraries
!pip install tensorflow tensorflow-datasets matplotlib --quiet

# STEP 2: Import Libraries
import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt
import numpy as np

# STEP 3: Load and Prepare Dataset (Food-101)
dataset, info = tfds.load('food101', split=['train[:1%]', 'validation[:1%]'], with_info=True, as_supervised=True)
train_ds, val_ds = dataset

IMG_SIZE = 128
BATCH_SIZE = 16

# Preprocessing Function
def preprocess(image, label):
    image = tf.image.resize(image, (IMG_SIZE, IMG_SIZE)) / 255.0
    return image, label

train_ds = train_ds.map(preprocess).batch(BATCH_SIZE).prefetch(1)
val_ds = val_ds.map(preprocess).batch(BATCH_SIZE).prefetch(1)

# STEP 4: Build CNN Model
num_classes = info.features['label'].num_classes
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(num_classes, activation='softmax'),
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# STEP 5: Train Model (Quick Demo - 5 Epochs)
history = model.fit(train_ds, validation_data=val_ds, epochs=5)

# STEP 6: Plot Training Performance
plt.figure(figsize=(12,4))
plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('Accuracy')
plt.legend()

plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Loss')
plt.legend()
plt.show()

# STEP 7: Example Calorie Map (Add more as needed)
calorie_map = {
    0: 285,  # Apple Pie
    1: 200,  # Baby Back Ribs
    2: 354,  # Baklava
    3: 320,  # Beef Carpaccio
    4: 300,  # Bibimbap
    5: 420,  # Burger
    6: 290,  # Hot Dog
    7: 550,  # Pizza
    8: 200,  # Sushi
    9: 150   # Beet Salad
}

# STEP 8: Prediction + Calorie Estimation
def predict_and_estimate(img):
    img_resized = tf.image.resize(img, (IMG_SIZE, IMG_SIZE)) / 255.0
    pred = model.predict(tf.expand_dims(img_resized, 0))
    label_id = tf.argmax(pred[0]).numpy()
    est_cal = calorie_map.get(label_id, "Not available")
    return label_id, est_cal

# STEP 9: Run Example Prediction
for images, labels in train_ds.take(1):
    sample_img = images[0].numpy()
    label, cal = predict_and_estimate(sample_img)
    plt.imshow(sample_img)
    plt.title(f"Predicted Label ID: {label}, Calories: {cal}")
    plt.axis('off')
    plt.show()

